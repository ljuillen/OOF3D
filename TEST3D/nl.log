OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, depth=1.0, width_in_pixels=10, height_in_pixels=10, depth_in_pixels=10)
OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Add_property(name='material', property='Thermal:Conductivity:Isotropic')
OOF.Material.Add_property(name='material', property='Thermal:HeatCapacity:ConstantHeatCapacity')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=5, y_elements=5, z_elements=5, skeleton_geometry=TetraSkeleton(arrangement='moderate'))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['TET4_4', 'D2_2', 'T3_3', 'Q4_4'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Temperature)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Temperature)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Heat_Eqn)
OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Temperature,field_component='',equation=Heat_Eqn,eqn_component='',profile=ConstantProfile(value=0.0),boundary='XminYmin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Temperature,field_component='',equation=Heat_Eqn,eqn_component='',profile=ConstantProfile(value=1),boundary='XmaxYmax'))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Temperature, initializer=FuncScalarFieldInit(function='0.0 if x < 0.9 or y < 0.9 else 1.0'))
OOF.Mesh.Apply_Field_Initializers_at_Time(mesh='microstructure:skeleton:mesh', time=0.0)
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('Temperature//Direct Output'), output=ScheduledAnalysis(data=getOutput('Field:Value',field=Temperature),operation=DirectOutput(),domain=EntireMesh(),sampling=GridSampleSet(x_points=9,y_points=9,z_points=9,show_x=True,show_y=True,show_z=True)), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.1), destination=OutputStream(filename='nlbulktemp.dat',mode='w'))
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('Temperature//Average'), output=ScheduledAnalysis(data=getOutput('Field:Value',field=Temperature),operation=AverageOutput(),domain=FaceBoundaryDomain(boundary='Ymax',side='BACK'),sampling=ContinuumSampleSet(order=automatic)), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.1), destination=OutputStream(filename='nlavgtoptemp.dat',mode='w'))

OOF.Subproblem.Set_Solver(
    subproblem='microstructure:skeleton:mesh:default', 
    solver_mode=AdvancedSolverMode(
        time_stepper=AdaptiveDriver(
            tolerance=1e-03,
            initialstep=0.01,
            minstep=1e-08,
            errorscaling=AbsoluteErrorScaling(),
            stepper=TwoStep(
                singlestep=ForwardEuler()
                # singlestep=BackwardEuler()
            )),
        nonlinear_solver=NoNonlinearSolver(),
        # nonlinear_solver=Newton(
        #     relative_tolerance=1e-08,
        #     absolute_tolerance=1.e-13,
        #     maximum_iterations=200),
        symmetric_solver=ConjugateGradient(
            preconditioner=ILUPreconditioner(),
            tolerance=1e-13,
            max_iterations=1000),
        asymmetric_solver=BiConjugateGradient(
            preconditioner=ILUPreconditioner(),
            tolerance=1e-13,
            max_iterations=1000)))

OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=1.0)

