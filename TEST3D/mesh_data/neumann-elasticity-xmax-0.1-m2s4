# OOF version 2.0
FileVersion(number=1.0, format='ascii')
Microstructure.New(name='microstructure', size=Point(2,2,2), isize=iPoint(10,10,10))
Microstructure.Categories(microstructure='microstructure', categories=[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]])
Property.Mechanical.Elasticity.Isotropic(name='instance', cijkl=IsotropicRank4TensorCij(c11=1.0,c12=0.5))
Property.Thermal.Conductivity.Isotropic(name='instance', kappa=1.0)
MaterialandType(name='material', properties=['Mechanical:Elasticity:Isotropic:instance', 'Thermal:Conductivity:Isotropic:instance'], materialtype='bulk')
Microstructure.DefineCategory.Material(microstructure='microstructure', category=0, material='material')
Microstructure.EndCategories(microstructure='microstructure')
Skeleton.NewPeriodic(name='skeleton', microstructure='microstructure', x_periodicity=0, y_periodicity=0, z_periodicity=0)
Skeleton.Nodes(skeleton='microstructure:skeleton', points=[(0.0, 0.0, 0.0), (0.0, 0.0, 0.5), (0.0, 0.0, 1.0), (0.0, 0.0, 1.5), (0.0, 0.0, 2.0), (0.5, 0.0, 0.0), (0.5, 0.0, 0.5), (0.5, 0.0, 1.0), (0.5, 0.0, 1.5), (0.5, 0.0, 2.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.5), (1.0, 0.0, 1.0), (1.0, 0.0, 1.5), (1.0, 0.0, 2.0), (1.5, 0.0, 0.0), (1.5, 0.0, 0.5), (1.5, 0.0, 1.0), (1.5, 0.0, 1.5), (1.5, 0.0, 2.0), (2.0, 0.0, 0.0), (2.0, 0.0, 0.5), (2.0, 0.0, 1.0), (2.0, 0.0, 1.5), (2.0, 0.0, 2.0), (0.0, 0.5, 0.0), (0.0, 0.5, 0.5), (0.0, 0.5, 1.0), (0.0, 0.5, 1.5), (0.0, 0.5, 2.0), (0.5, 0.5, 0.0), (0.5, 0.5, 0.5), (0.5, 0.5, 1.0), (0.5, 0.5, 1.5), (0.5, 0.5, 2.0), (1.0, 0.5, 0.0), (1.0, 0.5, 0.5), (1.0, 0.5, 1.0), (1.0, 0.5, 1.5), (1.0, 0.5, 2.0), (1.5, 0.5, 0.0), (1.5, 0.5, 0.5), (1.5, 0.5, 1.0), (1.5, 0.5, 1.5), (1.5, 0.5, 2.0), (2.0, 0.5, 0.0), (2.0, 0.5, 0.5), (2.0, 0.5, 1.0), (2.0, 0.5, 1.5), (2.0, 0.5, 2.0), (0.0, 1.0, 0.0), (0.0, 1.0, 0.5), (0.0, 1.0, 1.0), (0.0, 1.0, 1.5), (0.0, 1.0, 2.0), (0.5, 1.0, 0.0), (0.5, 1.0, 0.5), (0.5, 1.0, 1.0), (0.5, 1.0, 1.5), (0.5, 1.0, 2.0), (1.0, 1.0, 0.0), (1.0, 1.0, 0.5), (1.0, 1.0, 1.0), (1.0, 1.0, 1.5), (1.0, 1.0, 2.0), (1.5, 1.0, 0.0), (1.5, 1.0, 0.5), (1.5, 1.0, 1.0), (1.5, 1.0, 1.5), (1.5, 1.0, 2.0), (2.0, 1.0, 0.0), (2.0, 1.0, 0.5), (2.0, 1.0, 1.0), (2.0, 1.0, 1.5), (2.0, 1.0, 2.0), (0.0, 1.5, 0.0), (0.0, 1.5, 0.5), (0.0, 1.5, 1.0), (0.0, 1.5, 1.5), (0.0, 1.5, 2.0), (0.5, 1.5, 0.0), (0.5, 1.5, 0.5), (0.5, 1.5, 1.0), (0.5, 1.5, 1.5), (0.5, 1.5, 2.0), (1.0, 1.5, 0.0), (1.0, 1.5, 0.5), (1.0, 1.5, 1.0), (1.0, 1.5, 1.5), (1.0, 1.5, 2.0), (1.5, 1.5, 0.0), (1.5, 1.5, 0.5), (1.5, 1.5, 1.0), (1.5, 1.5, 1.5), (1.5, 1.5, 2.0), (2.0, 1.5, 0.0), (2.0, 1.5, 0.5), (2.0, 1.5, 1.0), (2.0, 1.5, 1.5), (2.0, 1.5, 2.0), (0.0, 2.0, 0.0), (0.0, 2.0, 0.5), (0.0, 2.0, 1.0), (0.0, 2.0, 1.5), (0.0, 2.0, 2.0), (0.5, 2.0, 0.0), (0.5, 2.0, 0.5), (0.5, 2.0, 1.0), (0.5, 2.0, 1.5), (0.5, 2.0, 2.0), (1.0, 2.0, 0.0), (1.0, 2.0, 0.5), (1.0, 2.0, 1.0), (1.0, 2.0, 1.5), (1.0, 2.0, 2.0), (1.5, 2.0, 0.0), (1.5, 2.0, 0.5), (1.5, 2.0, 1.0), (1.5, 2.0, 1.5), (1.5, 2.0, 2.0), (2.0, 2.0, 0.0), (2.0, 2.0, 0.5), (2.0, 2.0, 1.0), (2.0, 2.0, 1.5), (2.0, 2.0, 2.0)])
Skeleton.Elements(skeleton='microstructure:skeleton', nodes=[(1, 31, 6, 5), (1, 26, 31, 25), (5, 31, 30, 25), (1, 5, 0, 25), (1, 25, 31, 5), (2, 27, 7, 1), (27, 32, 7, 31), (27, 26, 31, 1), (7, 31, 6, 1), (27, 31, 7, 1), (3, 33, 8, 7), (3, 28, 33, 27), (7, 33, 32, 27), (3, 7, 2, 27), (3, 27, 33, 7), (4, 29, 9, 3), (29, 34, 9, 33), (29, 28, 33, 3), (9, 33, 8, 3), (29, 33, 9, 3), (6, 31, 11, 5), (31, 36, 11, 35), (31, 30, 35, 5), (11, 35, 10, 5), (31, 35, 11, 5), (7, 37, 12, 11), (7, 32, 37, 31), (11, 37, 36, 31), (7, 11, 6, 31), (7, 31, 37, 11), (8, 33, 13, 7), (33, 38, 13, 37), (33, 32, 37, 7), (13, 37, 12, 7), (33, 37, 13, 7), (9, 39, 14, 13), (9, 34, 39, 33), (13, 39, 38, 33), (9, 13, 8, 33), (9, 33, 39, 13), (11, 41, 16, 15), (11, 36, 41, 35), (15, 41, 40, 35), (11, 15, 10, 35), (11, 35, 41, 15), (12, 37, 17, 11), (37, 42, 17, 41), (37, 36, 41, 11), (17, 41, 16, 11), (37, 41, 17, 11), (13, 43, 18, 17), (13, 38, 43, 37), (17, 43, 42, 37), (13, 17, 12, 37), (13, 37, 43, 17), (14, 39, 19, 13), (39, 44, 19, 43), (39, 38, 43, 13), (19, 43, 18, 13), (39, 43, 19, 13), (16, 41, 21, 15), (41, 46, 21, 45), (41, 40, 45, 15), (21, 45, 20, 15), (41, 45, 21, 15), (17, 47, 22, 21), (17, 42, 47, 41), (21, 47, 46, 41), (17, 21, 16, 41), (17, 41, 47, 21), (18, 43, 23, 17), (43, 48, 23, 47), (43, 42, 47, 17), (23, 47, 22, 17), (43, 47, 23, 17), (19, 49, 24, 23), (19, 44, 49, 43), (23, 49, 48, 43), (19, 23, 18, 43), (19, 43, 49, 23), (26, 51, 31, 25), (51, 56, 31, 55), (51, 50, 55, 25), (31, 55, 30, 25), (51, 55, 31, 25), (27, 57, 32, 31), (27, 52, 57, 51), (31, 57, 56, 51), (27, 31, 26, 51), (27, 51, 57, 31), (28, 53, 33, 27), (53, 58, 33, 57), (53, 52, 57, 27), (33, 57, 32, 27), (53, 57, 33, 27), (29, 59, 34, 33), (29, 54, 59, 53), (33, 59, 58, 53), (29, 33, 28, 53), (29, 53, 59, 33), (31, 61, 36, 35), (31, 56, 61, 55), (35, 61, 60, 55), (31, 35, 30, 55), (31, 55, 61, 35), (32, 57, 37, 31), (57, 62, 37, 61), (57, 56, 61, 31), (37, 61, 36, 31), (57, 61, 37, 31), (33, 63, 38, 37), (33, 58, 63, 57), (37, 63, 62, 57), (33, 37, 32, 57), (33, 57, 63, 37), (34, 59, 39, 33), (59, 64, 39, 63), (59, 58, 63, 33), (39, 63, 38, 33), (59, 63, 39, 33), (36, 61, 41, 35), (61, 66, 41, 65), (61, 60, 65, 35), (41, 65, 40, 35), (61, 65, 41, 35), (37, 67, 42, 41), (37, 62, 67, 61), (41, 67, 66, 61), (37, 41, 36, 61), (37, 61, 67, 41), (38, 63, 43, 37), (63, 68, 43, 67), (63, 62, 67, 37), (43, 67, 42, 37), (63, 67, 43, 37), (39, 69, 44, 43), (39, 64, 69, 63), (43, 69, 68, 63), (39, 43, 38, 63), (39, 63, 69, 43), (41, 71, 46, 45), (41, 66, 71, 65), (45, 71, 70, 65), (41, 45, 40, 65), (41, 65, 71, 45), (42, 67, 47, 41), (67, 72, 47, 71), (67, 66, 71, 41), (47, 71, 46, 41), (67, 71, 47, 41), (43, 73, 48, 47), (43, 68, 73, 67), (47, 73, 72, 67), (43, 47, 42, 67), (43, 67, 73, 47), (44, 69, 49, 43), (69, 74, 49, 73), (69, 68, 73, 43), (49, 73, 48, 43), (69, 73, 49, 43), (51, 81, 56, 55), (51, 76, 81, 75), (55, 81, 80, 75), (51, 55, 50, 75), (51, 75, 81, 55), (52, 77, 57, 51), (77, 82, 57, 81), (77, 76, 81, 51), (57, 81, 56, 51), (77, 81, 57, 51), (53, 83, 58, 57), (53, 78, 83, 77), (57, 83, 82, 77), (53, 57, 52, 77), (53, 77, 83, 57), (54, 79, 59, 53), (79, 84, 59, 83), (79, 78, 83, 53), (59, 83, 58, 53), (79, 83, 59, 53), (56, 81, 61, 55), (81, 86, 61, 85), (81, 80, 85, 55), (61, 85, 60, 55), (81, 85, 61, 55), (57, 87, 62, 61), (57, 82, 87, 81), (61, 87, 86, 81), (57, 61, 56, 81), (57, 81, 87, 61), (58, 83, 63, 57), (83, 88, 63, 87), (83, 82, 87, 57), (63, 87, 62, 57), (83, 87, 63, 57), (59, 89, 64, 63), (59, 84, 89, 83), (63, 89, 88, 83), (59, 63, 58, 83), (59, 83, 89, 63), (61, 91, 66, 65), (61, 86, 91, 85), (65, 91, 90, 85), (61, 65, 60, 85), (61, 85, 91, 65), (62, 87, 67, 61), (87, 92, 67, 91), (87, 86, 91, 61), (67, 91, 66, 61), (87, 91, 67, 61), (63, 93, 68, 67), (63, 88, 93, 87), (67, 93, 92, 87), (63, 67, 62, 87), (63, 87, 93, 67), (64, 89, 69, 63), (89, 94, 69, 93), (89, 88, 93, 63), (69, 93, 68, 63), (89, 93, 69, 63), (66, 91, 71, 65), (91, 96, 71, 95), (91, 90, 95, 65), (71, 95, 70, 65), (91, 95, 71, 65), (67, 97, 72, 71), (67, 92, 97, 91), (71, 97, 96, 91), (67, 71, 66, 91), (67, 91, 97, 71), (68, 93, 73, 67), (93, 98, 73, 97), (93, 92, 97, 67), (73, 97, 72, 67), (93, 97, 73, 67), (69, 99, 74, 73), (69, 94, 99, 93), (73, 99, 98, 93), (69, 73, 68, 93), (69, 93, 99, 73), (76, 101, 81, 75), (101, 106, 81, 105), (101, 100, 105, 75), (81, 105, 80, 75), (101, 105, 81, 75), (77, 107, 82, 81), (77, 102, 107, 101), (81, 107, 106, 101), (77, 81, 76, 101), (77, 101, 107, 81), (78, 103, 83, 77), (103, 108, 83, 107), (103, 102, 107, 77), (83, 107, 82, 77), (103, 107, 83, 77), (79, 109, 84, 83), (79, 104, 109, 103), (83, 109, 108, 103), (79, 83, 78, 103), (79, 103, 109, 83), (81, 111, 86, 85), (81, 106, 111, 105), (85, 111, 110, 105), (81, 85, 80, 105), (81, 105, 111, 85), (82, 107, 87, 81), (107, 112, 87, 111), (107, 106, 111, 81), (87, 111, 86, 81), (107, 111, 87, 81), (83, 113, 88, 87), (83, 108, 113, 107), (87, 113, 112, 107), (83, 87, 82, 107), (83, 107, 113, 87), (84, 109, 89, 83), (109, 114, 89, 113), (109, 108, 113, 83), (89, 113, 88, 83), (109, 113, 89, 83), (86, 111, 91, 85), (111, 116, 91, 115), (111, 110, 115, 85), (91, 115, 90, 85), (111, 115, 91, 85), (87, 117, 92, 91), (87, 112, 117, 111), (91, 117, 116, 111), (87, 91, 86, 111), (87, 111, 117, 91), (88, 113, 93, 87), (113, 118, 93, 117), (113, 112, 117, 87), (93, 117, 92, 87), (113, 117, 93, 87), (89, 119, 94, 93), (89, 114, 119, 113), (93, 119, 118, 113), (89, 93, 88, 113), (89, 113, 119, 93), (91, 121, 96, 95), (91, 116, 121, 115), (95, 121, 120, 115), (91, 95, 90, 115), (91, 115, 121, 95), (92, 117, 97, 91), (117, 122, 97, 121), (117, 116, 121, 91), (97, 121, 96, 91), (117, 121, 97, 91), (93, 123, 98, 97), (93, 118, 123, 117), (97, 123, 122, 117), (93, 97, 92, 117), (93, 117, 123, 97), (94, 119, 99, 93), (119, 124, 99, 123), (119, 118, 123, 93), (99, 123, 98, 93), (119, 123, 99, 93)])
Skeleton.PinnedNodes(skeleton='microstructure:skeleton', nodes=[])
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYmaxZmax', nodes=[124], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYmaxZmin', nodes=[120], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYminZmax', nodes=[24], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYminZmin', nodes=[20], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYmaxZmax', nodes=[104], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYmaxZmin', nodes=[100], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYminZmax', nodes=[4], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYminZmin', nodes=[0], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxYmax', edges=[(120, 121), (121, 122), (122, 123), (123, 124)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxYmin', edges=[(20, 21), (21, 22), (22, 23), (23, 24)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxZmax', edges=[(24, 49), (49, 74), (74, 99), (99, 124)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxZmin', edges=[(20, 45), (45, 70), (70, 95), (95, 120)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminYmax', edges=[(100, 101), (101, 102), (102, 103), (103, 104)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminYmin', edges=[(0, 1), (1, 2), (2, 3), (3, 4)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminZmax', edges=[(4, 29), (29, 54), (54, 79), (79, 104)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminZmin', edges=[(0, 25), (25, 50), (50, 75), (75, 100)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YmaxZmax', edges=[(104, 109), (109, 114), (114, 119), (119, 124)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YmaxZmin', edges=[(100, 105), (105, 110), (110, 115), (115, 120)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YminZmax', edges=[(4, 9), (9, 14), (14, 19), (19, 24)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YminZmin', edges=[(0, 5), (5, 10), (10, 15), (15, 20)], exterior=1)
Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Xmax', faces=[(21, 45, 46), (21, 46, 47), (23, 47, 48), (23, 48, 49), (45, 21, 20), (45, 70, 71), (47, 22, 21), (47, 23, 22), (47, 71, 72), (47, 72, 73), (49, 24, 23), (49, 73, 74), (71, 46, 45), (71, 47, 46), (71, 95, 96), (71, 96, 97), (73, 48, 47), (73, 49, 48), (73, 97, 98), (73, 98, 99), (95, 71, 70), (95, 120, 121), (97, 72, 71), (97, 73, 72), (97, 121, 122), (97, 122, 123), (99, 74, 73), (99, 123, 124), (121, 96, 95), (121, 97, 96), (123, 98, 97), (123, 99, 98)], exterior=1)
Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Xmin', faces=[(0, 1, 25), (1, 2, 27), (2, 3, 27), (3, 4, 29), (25, 26, 51), (26, 25, 1), (26, 27, 51), (27, 26, 1), (27, 28, 53), (28, 27, 3), (28, 29, 53), (29, 28, 3), (50, 51, 75), (51, 50, 25), (51, 52, 77), (52, 51, 27), (52, 53, 77), (53, 52, 27), (53, 54, 79), (54, 53, 29), (75, 76, 101), (76, 75, 51), (76, 77, 101), (77, 76, 51), (77, 78, 103), (78, 77, 53), (78, 79, 103), (79, 78, 53), (101, 100, 75), (102, 101, 77), (103, 102, 77), (104, 103, 79)], exterior=1)
Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Ymax', faces=[(100, 101, 105), (101, 102, 107), (102, 103, 107), (103, 104, 109), (105, 106, 111), (106, 105, 101), (106, 107, 111), (107, 106, 101), (107, 108, 113), (108, 107, 103), (108, 109, 113), (109, 108, 103), (110, 111, 115), (111, 110, 105), (111, 112, 117), (112, 111, 107), (112, 113, 117), (113, 112, 107), (113, 114, 119), (114, 113, 109), (115, 116, 121), (116, 115, 111), (116, 117, 121), (117, 116, 111), (117, 118, 123), (118, 117, 113), (118, 119, 123), (119, 118, 113), (121, 120, 115), (122, 121, 117), (123, 122, 117), (124, 123, 119)], exterior=1)
Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Ymin', faces=[(1, 5, 6), (1, 6, 7), (3, 7, 8), (3, 8, 9), (5, 1, 0), (5, 10, 11), (7, 2, 1), (7, 3, 2), (7, 11, 12), (7, 12, 13), (9, 4, 3), (9, 13, 14), (11, 6, 5), (11, 7, 6), (11, 15, 16), (11, 16, 17), (13, 8, 7), (13, 9, 8), (13, 17, 18), (13, 18, 19), (15, 11, 10), (15, 20, 21), (17, 12, 11), (17, 13, 12), (17, 21, 22), (17, 22, 23), (19, 14, 13), (19, 23, 24), (21, 16, 15), (21, 17, 16), (23, 18, 17), (23, 19, 18)], exterior=1)
Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Zmax', faces=[(4, 9, 29), (9, 14, 39), (14, 19, 39), (19, 24, 49), (29, 34, 59), (34, 29, 9), (34, 39, 59), (39, 34, 9), (39, 44, 69), (44, 39, 19), (44, 49, 69), (49, 44, 19), (54, 59, 79), (59, 54, 29), (59, 64, 89), (64, 59, 39), (64, 69, 89), (69, 64, 39), (69, 74, 99), (74, 69, 49), (79, 84, 109), (84, 79, 59), (84, 89, 109), (89, 84, 59), (89, 94, 119), (94, 89, 69), (94, 99, 119), (99, 94, 69), (109, 104, 79), (114, 109, 89), (119, 114, 89), (124, 119, 99)], exterior=1)
Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Zmin', faces=[(5, 25, 30), (5, 30, 35), (15, 35, 40), (15, 40, 45), (25, 5, 0), (25, 50, 55), (35, 10, 5), (35, 15, 10), (35, 55, 60), (35, 60, 65), (45, 20, 15), (45, 65, 70), (55, 30, 25), (55, 35, 30), (55, 75, 80), (55, 80, 85), (65, 40, 35), (65, 45, 40), (65, 85, 90), (65, 90, 95), (75, 55, 50), (75, 100, 105), (85, 60, 55), (85, 65, 60), (85, 105, 110), (85, 110, 115), (95, 70, 65), (95, 115, 120), (105, 80, 75), (105, 85, 80), (115, 90, 85), (115, 95, 90)], exterior=1)
Skeleton.ElementSelection(skeleton='microstructure:skeleton', elements=[])
Skeleton.FaceSelection(skeleton='microstructure:skeleton', faces=[])
Skeleton.SegmentSelection(skeleton='microstructure:skeleton', segments=[])
Skeleton.NodeSelection(skeleton='microstructure:skeleton', nodes=[])
Mesh.New(name='mesh', masterelems=['D2_2', 'TET4_4', 'T3_3', 'Q4_4'], skeleton='microstructure:skeleton')
Subproblem.Fields(subproblem='microstructure:skeleton:mesh:default', defined=['Displacement'], active=['Displacement'])
Subproblem.Equations(subproblem='microstructure:skeleton:mesh:default', equations=['Force_Balance'])
Subproblem.Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=BasicSolverMode(time_stepper=BasicStaticDriver(),matrix_method=BasicIterative(tolerance=1e-13,max_iterations=1000)))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='dirichlet-Xmin', bc=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='Xmin'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='dirichlet-Ymax', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='Ymax'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='dirichlet-Ymin', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='Ymin'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='dirichlet-Zmax', bc=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Zmax'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='dirichlet-Zmin', bc=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Zmin'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='neumann-Xmax', bc=NeumannBC(flux=Stress,profile=[ConstantProfile(value=-0.1), ConstantProfile(value=0.0), ConstantProfile(value=0.0)],boundary='Xmax'))
Mesh.Load_Field(mesh='microstructure:skeleton:mesh', fields=['Displacement'], field_values=[(0, 0.0, 0.0, 0.0), (1, 0.0, 0.0, 8.288284697160475e-17), (2, 0.0, 0.0, -1.3666847192252955e-16), (3, 0.0, 0.0, -6.108056963259187e-17), (4, 0.0, 0.0, 0.0), (5, 0.04999999999999971, 0.0, 0.0), (6, 0.04999999999999995, 0.0, 5.3813207575438764e-17), (7, 0.0499999999999999, 0.0, 3.877440880370822e-17), (8, 0.04999999999999994, 0.0, 1.2601744387996177e-16), (9, 0.049999999999999725, 0.0, 0.0), (10, 0.09999999999999971, 0.0, 0.0), (11, 0.10000000000000005, 0.0, -1.5946507506158667e-16), (12, 0.09999999999999992, 0.0, -1.7760803699578624e-16), (13, 0.09999999999999994, 0.0, 6.6786437614343315e-18), (14, 0.09999999999999971, 0.0, 0.0), (15, 0.14999999999999986, 0.0, 0.0), (16, 0.15000000000000005, 0.0, -6.357529026078164e-17), (17, 0.15000000000000005, 0.0, -5.738576356938054e-17), (18, 0.15, 0.0, 1.4308169211900665e-16), (19, 0.15000000000000002, 0.0, 0.0), (20, 0.19999999999999968, 0.0, 0.0), (21, 0.20000000000000015, 0.0, -8.170324863649902e-17), (22, 0.2000000000000001, 0.0, -2.6914013455633935e-17), (23, 0.2, 0.0, -6.013279017752639e-17), (24, 0.19999999999999982, 0.0, 0.0), (25, 0.0, -1.801301192199916e-16, 0.0), (26, 0.0, 1.0084996358842774e-16, 5.5295550423565224e-17), (27, 0.0, 4.123569905878899e-17, -1.2469631803848815e-17), (28, 0.0, 1.892646823283336e-16, -8.111676486300712e-17), (29, 0.0, 7.157073024063212e-17, 0.0), (30, 0.049999999999999864, -1.7789535215456574e-17, 0.0), (31, 0.049999999999999906, 2.1113958214575332e-16, 6.951325720297723e-17), (32, 0.049999999999999996, 6.078706790391225e-17, 1.8045075083873355e-16), (33, 0.04999999999999992, 1.657088319681061e-16, 1.6241456815132634e-17), (34, 0.0499999999999999, 1.6556141007874554e-16, 0.0), (35, 0.09999999999999976, 3.642105238421673e-17, 0.0), (36, 0.1000000000000001, 4.7938124809301444e-17, -5.168732142975433e-17), (37, 0.10000000000000013, -7.064995987051911e-17, -1.3866919245655663e-16), (38, 0.09999999999999967, -5.862087098338197e-17, -8.34264038190493e-17), (39, 0.09999999999999976, -1.5387085936661847e-16, 0.0), (40, 0.14999999999999986, -4.760270426591605e-17, 0.0), (41, 0.15000000000000033, 1.3614993799970243e-16, -4.043972644323451e-17), (42, 0.15, 1.5940186519596244e-17, -1.8698830786703037e-16), (43, 0.15000000000000002, 1.7021586704210952e-16, -1.9887858757372225e-16), (44, 0.15000000000000008, -4.806060559438729e-17, 0.0), (45, 0.19999999999999982, -4.329593171292255e-16, 0.0), (46, 0.2000000000000004, -1.2556592647783736e-16, 2.845060440465603e-17), (47, 0.20000000000000004, 8.331933860597003e-17, -2.254272418239764e-16), (48, 0.19999999999999996, -4.6952535872810734e-17, -4.1879237523997604e-16), (49, 0.1999999999999999, -4.23819413364315e-17, 0.0), (50, 0.0, -1.6437079533398842e-17, 0.0), (51, 0.0, 3.1520376356891963e-16, -1.6625369403423232e-16), (52, 0.0, 1.2509276229032484e-16, -1.0847545123080225e-16), (53, 0.0, 1.5860654920283462e-16, -1.5463065474214182e-16), (54, 0.0, 1.2601470647746626e-16, 0.0), (55, 0.05000000000000001, -1.0655540344163599e-16, 0.0), (56, 0.05000000000000012, 6.480431896150312e-17, -4.7095422098053135e-17), (57, 0.050000000000000024, 2.8351611478098996e-17, -7.169040768682407e-17), (58, 0.050000000000000044, 2.2618061670642856e-16, -1.5724217456921033e-16), (59, 0.049999999999999906, 3.817193217204196e-17, 0.0), (60, 0.10000000000000003, -1.259196210318245e-16, 0.0), (61, 0.10000000000000017, -2.0109412392933976e-17, -2.1863726896026046e-17), (62, 0.10000000000000003, 6.600129014214174e-17, -1.5409710219593278e-17), (63, 0.10000000000000006, -3.0151345592432234e-17, -1.1040755403626993e-16), (64, 0.10000000000000012, -4.543001605910677e-16, 0.0), (65, 0.14999999999999997, -8.212208911048169e-17, 0.0), (66, 0.1500000000000003, -1.1873817691995567e-18, -1.8788581913371412e-16), (67, 0.15000000000000024, 6.044457994100583e-17, -2.654247585376278e-16), (68, 0.15000000000000008, 7.239973401660955e-17, -2.5828229123632363e-16), (69, 0.15000000000000002, -1.9536946338607014e-16, 0.0), (70, 0.19999999999999976, -2.2394284089147744e-16, 0.0), (71, 0.20000000000000034, 2.2236431229291577e-16, -4.2328907740525365e-16), (72, 0.20000000000000023, 2.3313109402980216e-16, -4.548509946408802e-16), (73, 0.2, 2.427398257426267e-17, -1.352102276222363e-16), (74, 0.2, -7.581085185131276e-17, 0.0), (75, 0.0, 1.0787522240791426e-16, 0.0), (76, 0.0, 1.665405750672095e-16, -1.021267071007111e-16), (77, 0.0, 8.749064339289919e-17, -1.913146295406963e-16), (78, 0.0, 2.700436992373623e-16, -2.948831051284033e-16), (79, 0.0, -1.6687579521863204e-16, 0.0), (80, 0.05000000000000001, -1.31363424323961e-16, 0.0), (81, 0.05000000000000027, 6.912433317824903e-17, -9.179794137805876e-17), (82, 0.05000000000000002, -7.076730709268238e-17, -2.5869925630637987e-16), (83, 0.050000000000000065, -1.6929991294899165e-17, -1.139307849394161e-16), (84, 0.050000000000000086, -8.929926910574e-17, 0.0), (85, 0.0999999999999999, -2.0286058359897258e-16, 0.0), (86, 0.10000000000000005, -7.956266456485769e-17, -2.6957044713650382e-17), (87, 0.09999999999999995, 5.308392279968525e-17, -1.2385114415442021e-17), (88, 0.10000000000000016, -1.318441361168344e-16, 5.357263151009791e-17), (89, 0.10000000000000002, -1.723438385313915e-16, 0.0), (90, 0.1499999999999998, -2.0380340850868415e-17, 0.0), (91, 0.14999999999999983, 1.12176804440761e-16, -7.36287866581655e-17), (92, 0.15000000000000002, 5.995171608505156e-17, -1.2474852063260213e-16), (93, 0.14999999999999994, -1.0245826711575493e-16, 4.4043274384687235e-17), (94, 0.1500000000000002, -1.4868896699140382e-16, 0.0), (95, 0.19999999999999954, 2.947350056734642e-16, 0.0), (96, 0.19999999999999962, 5.590918562354564e-16, -9.877755531126405e-17), (97, 0.1999999999999997, 2.680369741528519e-16, 7.262919848502719e-17), (98, 0.2000000000000001, 7.539853796977125e-17, -5.581555112235412e-17), (99, 0.20000000000000012, -1.743084505025992e-17, 0.0), (100, 0.0, 0.0, 0.0), (101, 0.0, 0.0, -2.6343131227297134e-16), (102, 0.0, 0.0, -1.2601362189593725e-16), (103, 0.0, 0.0, 4.456570842612376e-16), (104, 0.0, 0.0, 0.0), (105, 0.050000000000000405, 0.0, 0.0), (106, 0.050000000000000176, 0.0, -1.2388996273305868e-16), (107, 0.049999999999999996, 0.0, 3.6764632533959164e-17), (108, 0.05000000000000006, 0.0, 1.5409635240590679e-16), (109, 0.05000000000000002, 0.0, 0.0), (110, 0.10000000000000002, 0.0, 0.0), (111, 0.10000000000000035, 0.0, -1.246760867259048e-18), (112, 0.09999999999999991, 0.0, 2.7247510864544007e-16), (113, 0.10000000000000019, 0.0, 4.0119821894968517e-17), (114, 0.09999999999999955, 0.0, 0.0), (115, 0.1499999999999998, 0.0, 0.0), (116, 0.15, 0.0, 7.778871111157085e-18), (117, 0.14999999999999972, 0.0, 2.3882222152122537e-16), (118, 0.1499999999999999, 0.0, 1.5280439621417885e-16), (119, 0.14999999999999994, 0.0, 0.0), (120, 0.19999999999999926, 0.0, 0.0), (121, 0.19999999999999984, 0.0, 5.77718968381776e-16), (122, 0.19999999999999976, 0.0, 5.465108426327823e-16), (123, 0.20000000000000018, 0.0, 2.44811249533978e-16), (124, 0.19999999999999984, 0.0, 0.0)])
Mesh.Cache_Fields(mesh='microstructure:skeleton:mesh', time=0.0)
Mesh.Time(mesh='microstructure:skeleton:mesh', time=0.0)
Mesh.Status(mesh='microstructure:skeleton:mesh', status=Solved(details=''))
