OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, depth=1.0, width_in_pixels=10, height_in_pixels=10, depth_in_pixels=10)
OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
OOF.Property.Copy(property='Mechanical:Elasticity:Isotropic', new_name='iso8')
OOF.Property.Parametrize.Mechanical.Elasticity.Isotropic.iso8(cijkl=IsotropicRank4TensorEnu(young=0.6666666666666666,poisson=0.2))
OOF.Material.Add_property(name='material', property='Mechanical:Elasticity:Isotropic:iso8')
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=4, y_elements=4, z_elements=4, skeleton_geometry=TetraSkeleton(arrangement='moderate'))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['TET4_4', 'D2_2', 'T3_3', 'Q4_4'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Force_Balance)
OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='Xmin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.1),boundary='Xmax'))
OOF.Mesh.Boundary_Conditions.New(name='bc<3>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='Ymin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<4>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='Ymax'))
OOF.Mesh.Boundary_Conditions.New(name='bc<5>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Zmin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<6>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Zmax'))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=ConstThreeVectorFieldInit(cx=0.0,cy=0.0,cz=0.0))
OOF.Subproblem.Set_Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=AdvancedSolverMode(time_stepper=StaticDriver(),nonlinear_solver=NoNonlinearSolver(),symmetric_solver=ConjugateGradient(preconditioner=ILUPreconditioner(),tolerance=1e-13,max_iterations=1000),asymmetric_solver=None))
OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=0.0)
OOF.Mesh.Analyze.Integral(mesh='microstructure:skeleton:mesh', time=latest, data=getOutput('Flux:Normal:Value',flux=Stress), domain=FaceBoundaryDomain(boundary='Xmax',side='FRONT'), sampling=FaceBoundarySampleSet(order=automatic), destination=MessageWindowStream())
OOF.Material.Add_property(name='material', property='Thermal:Conductivity:Isotropic')
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Temperature)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Temperature)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Heat_Eqn)
