OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, depth=1.0, width_in_pixels=10, height_in_pixels=10, depth_in_pixels=10)
OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
OOF.Material.Add_property(name='material', property='Mechanical:Elasticity:Isotropic')
OOF.Material.Add_property(name='material', property='Mechanical:MassDensity:ConstantMassDensity')
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=1, y_elements=2, z_elements=1, skeleton_geometry=TetraSkeleton(arrangement='moderate'))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['TET4_4', 'Q4_4', 'T3_3', 'D2_2'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Force_Balance)
OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='Ymin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='Ymin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<3>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Ymin'))
OOF.Mesh.Boundary_Conditions.New(name='bc<4>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Ymin'))
OOF.Mesh.Boundary_Conditions.Delete(mesh='microstructure:skeleton:mesh', name='bc<4>')
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('GraphicsUpdate'), output=GraphicsUpdate())
OOF.Mesh.Scheduled_Output.Schedule.Set(mesh='microstructure:skeleton:mesh', output=AutomaticName('GraphicsUpdate'), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.1))
OOF.Subproblem.Set_Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=BasicSolverMode(time_stepper=BasicAdaptiveDriver(tolerance=0.0001,minstep=1e-05),matrix_method=BasicIterative(tolerance=1e-13,max_iterations=1000)))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement_t, initializer=ConstThreeVectorFieldInit(cx=0.0,cy=0.0,cz=0.0))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=FuncThreeVectorFieldInit(fx='0.0',fy='0.1*y',fz='0.0'))
OOF.Mesh.Apply_Field_Initializers_at_Time(mesh='microstructure:skeleton:mesh', time=0.0)
OOF.Windows.Graphics.New()
#OOF.Windows.Graphics.New()
OOF.Graphics_1.Layer.Select(n=3)
OOF.Graphics_1.Layer.Edit(n=3, category='Skeleton', what='microstructure:skeleton', how=SkeletonEdgeDisplay(color=Gray(value=0.6984126984126984),width=1,filter=NullFilter()))
OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=1.0)
OOF.Graphics_1.Settings.Time(time=0.138996138996139)
