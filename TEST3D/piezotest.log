OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, depth=1.0, width_in_pixels=10, height_in_pixels=10, depth_in_pixels=10)
OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
OOF.Property.Parametrize.Mechanical.Elasticity.Isotropic(cijkl=IsotropicRank4TensorCij(c11=1.0,c12=0.5))
OOF.Material.Add_property(name='material', property='Mechanical:Elasticity:Isotropic')
OOF.Property.Parametrize.Electric.DielectricPermittivity.Isotropic(epsilon=1.0)
OOF.Material.Add_property(name='material', property='Electric:DielectricPermittivity:Isotropic')
OOF.Property.Parametrize.Couplings.PiezoElectricity.Cubic.Td(dijk=TdRank3Tensor(d14=1.0))
OOF.Material.Add_property(name='material', property='Couplings:PiezoElectricity:Cubic:Td')
OOF.Property.Parametrize.Orientation(angles=Abg(alpha=0,beta=0,gamma=0))
OOF.Material.Add_property(name='material', property='Orientation')
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=5, y_elements=5, z_elements=5, skeleton_geometry=TetraSkeleton(arrangement='moderate'))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['TET4_4', 'D2_2', 'T3_3', 'Q4_4'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Voltage)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Voltage)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Coulomb_Eqn)
OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Voltage,field_component='',equation=Coulomb_Eqn,eqn_component='',profile=ContinuumProfileXTd(function='0',timeDerivative='0',timeDerivative2='0'),boundary='XminYminZmin'))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=FuncThreeVectorFieldInit(fx='0.1*y',fy='0.1*z',fz='0.1*x'))
OOF.Mesh.Apply_Field_Initializers(mesh='microstructure:skeleton:mesh')
OOF.Subproblem.Set_Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=BasicSolverMode(time_stepper=BasicStaticDriver(),matrix_method=BasicIterative(tolerance=1e-13,max_iterations=1000)))
OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=0.0)

