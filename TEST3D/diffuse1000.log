# OOF version (unreleased)

import resource, sys, gc

niters = 10
nelems = 5
# output interval is 0.01
# endtime is 0.1*timefactor
# timestep is 0.01*timestepfactor.  Don't make timestepfactor > 1.
timefactor = 0.1
timestepfactor = 0.1
cache = 'Memory'   # 'Disk' or 'Memory'

filename = '-'.join(["memdump-list",
                     cache, 
                     `niters`,
                     `nelems`,
                     `timefactor`,
                     `timestepfactor`])
memfile = file(filename, "w")

OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Add_property(name='material', property='Thermal:Conductivity:Isotropic')
OOF.Material.Add_property(name='material', property='Thermal:HeatCapacity:ConstantHeatCapacity')

from ooflib.SWIG.engine import sparsemat

r = resource.getrusage(resource.RUSAGE_SELF)
print >> memfile, -1, r.ru_maxrss, sparsemat.getTotalNnz()
#r.ru_maxrss/(nelems+1.0)**3/timefactor*timestepfactor
memfile.flush()

for i in range(niters):
    OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, depth=1.0, width_in_pixels=10, height_in_pixels=10, depth_in_pixels=10)
    OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
    OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=nelems, y_elements=nelems, z_elements=nelems, skeleton_geometry=TetraSkeleton(arrangement='moderate'))
    OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['TET4_4', 'Q4_4', 'T3_3', 'D2_2'])
    OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Temperature)
    OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Temperature)
    OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Heat_Eqn)

    OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name='GraphicsUpdate<2>', output=ScheduledAnalysis(data=getOutput('Field:Value',field=Temperature),operation=AverageOutput(),domain=FaceBoundaryDomain(boundary='Ymin',side='FRONT'),sampling=ContinuumSampleSet(order=automatic)), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.01), destination=MessageWindowStream())

    OOF.Subproblem.Set_Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=BasicSolverMode(time_stepper=BasicUniformDriver(stepsize=0.01*timestepfactor),matrix_method=BasicIterative(tolerance=1e-13,max_iterations=1000)))

    OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=NeumannBC(flux=Heat_Flux,profile=ConstantProfile(value=1),boundary='Ymin'))
    OOF.Mesh.Boundary_Conditions.New(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Temperature,field_component='',equation=Heat_Eqn,eqn_component='',profile=ConstantProfile(value=0.0),boundary='Ymax'))
    
    OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Temperature, initializer=ConstScalarFieldInit(value=0.0))
    OOF.Mesh.Modify(mesh='microstructure:skeleton:mesh', modifier=SetMeshDataCacheType(cachetype=cache))

    OOF.Mesh.Apply_Field_Initializers_at_Time(
        mesh='microstructure:skeleton:mesh', time=0.0)
    OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=0.1*timefactor)

    OOF.Microstructure.Delete(microstructure="microstructure")

    r = resource.getrusage(resource.RUSAGE_SELF)
    print >> memfile, i, r.ru_maxrss, sparsemat.getTotalNnz()
    #r.ru_maxrss/(nelems+1.0)**3/timefactor*timestepfactor
    memfile.flush()
    print >> sys.stderr, "garbage=", gc.garbage

memfile.close()
print >> sys.stderr, "Wrote memory usage to", filename
