# OOF version (unreleased)
OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, depth=0.3, width_in_pixels=10, height_in_pixels=10, depth_in_pixels=3)
OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
OOF.Property.Copy(property='Mechanical:Elasticity:Anisotropic:Hexagonal', new_name='hex')
OOF.Property.Parametrize.Mechanical.Elasticity.Anisotropic.Hexagonal.hex(cijkl=HexagonalRank4TensorCij(c11=4, c12=0.2, c13=0.1, c33=1.0, c44=0.5))
OOF.Material.Add_property(name='material', property='Mechanical:Elasticity:Anisotropic:Hexagonal:hex')
OOF.Property.Copy(property='Mechanical:MassDensity:ConstantMassDensity', new_name='massdensity')
OOF.Property.Parametrize.Mechanical.MassDensity.ConstantMassDensity.massdensity(rho=1.0)
OOF.Material.Add_property(name='material', property='Mechanical:MassDensity:ConstantMassDensity:massdensity')
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=4, y_elements=4, z_elements=2, skeleton_geometry=TetraSkeleton(arrangement='moderate'))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['TET4_4', 'D2_2', 'T3_3', 'Q4_4'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Force_Balance)
OOF.Mesh.Boundary_Conditions.New(name='bcx', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='Xmin'))
OOF.Mesh.Boundary_Conditions.New(name='bcy', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='Xmin'))
OOF.Mesh.Boundary_Conditions.New(name='bcz', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='Xmin'))
OOF.Mesh.Boundary_Conditions.New(name='pull', mesh='microstructure:skeleton:mesh', condition=NeumannBC(flux=Stress,profile=[ConstantProfile(value=0.1), ConstantProfile(value=0.0), ConstantProfile(value=0.0)],boundary='Xmax'))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=ConstThreeVectorFieldInit(cx=0.0,cy=0.0,cz=0.0))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement_t, initializer=ConstThreeVectorFieldInit(cx=0.0,cy=0.0,cz=0.0))
OOF.Subproblem.Set_Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=AdvancedSolverMode(time_stepper=AdaptiveDriver(tolerance=1e-05,initialstep=0,minstep=1e-05,errorscaling=AbsoluteErrorScaling(),stepper=TwoStep(singlestep=SS22(theta1=0.5,theta2=0.5))),nonlinear_solver=NoNonlinearSolver(),symmetric_solver=ConjugateGradient(preconditioner=ILUPreconditioner(),tolerance=1e-13,max_iterations=1000),asymmetric_solver=None))
OOF.Windows.Graphics.New()
OOF.Graphics_1.Layer.Select(n=3)
OOF.Graphics_1.Layer.Edit(n=3, category='Skeleton', what='microstructure:skeleton', how=SkeletonEdgeDisplay(color=Gray(value=0.873015873015873),width=1,filter=NullFilter()))
OOF.Property.Copy(property='Orientation', new_name='hex')
OOF.Material.Add_property(name='material', property='Orientation:hex')
OOF.Property.Parametrize.Orientation.hex(angles=Abg(alpha=60,beta=0,gamma=0))
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('GraphicsUpdate'), output=GraphicsUpdate())
OOF.Mesh.Scheduled_Output.Schedule.Set(mesh='microstructure:skeleton:mesh', output=AutomaticName('GraphicsUpdate'), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.05))
OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=1.0)
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Top')
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Right')
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Front')
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Top')
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Right')
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Top')
OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=2.0)
OOF.Graphics_1.Toolbox.Viewer.Restore_View(view=View(cameraPosition=Coord(3.42583,0.5,0.15), focalPoint=Coord(0.5,0.5,0.15), up=Coord(0,1,0), angle=30, clipPlanes=[], invertClip=0, size_x=622, size_y=617))
OOF.Graphics_1.Toolbox.Viewer.Restore_View(view=View(cameraPosition=Coord(0.5,3.42583,0.15), focalPoint=Coord(0.5,0.5,0.15), up=Coord(0,0,1), angle=30, clipPlanes=[], invertClip=0, size_x=622, size_y=617))
OOF.Graphics_1.Toolbox.Viewer.Restore_View(view=View(cameraPosition=Coord(0.5,0.5,2.72583), focalPoint=Coord(0.5,0.5,0.15), up=Coord(0,1,0), angle=30, clipPlanes=[], invertClip=0, size_x=622, size_y=617))
OOF.Mesh.Analyze.Average(mesh='microstructure:skeleton:mesh', time=latest, data=getOutput('Field:Value',field=Displacement), domain=FaceBoundaryDomain(boundary='Zmax',side='FRONT'), sampling=FaceBoundarySampleSet(order=automatic), destination=MessageWindowStream())
OOF.Mesh.Analyze.Average(mesh='microstructure:skeleton:mesh', time=latest, data=getOutput('Field:Value',field=Displacement), domain=FaceBoundaryDomain(boundary='Zmin',side='FRONT'), sampling=FaceBoundarySampleSet(order=automatic), destination=MessageWindowStream())
OOF.Property.Parametrize.Orientation.hex(angles=Abg(alpha=60,beta=0,gamma=45))
OOF.Mesh.Apply_Field_Initializers_at_Time(mesh='microstructure:skeleton:mesh', time=0.0)
OOF.Mesh.Solve(mesh='microstructure:skeleton:mesh', endtime=2.0)
OOF.Graphics_1.Toolbox.Viewer.Restore_Named_View(view='Right')
OOF.Mesh.Analyze.Average(mesh='microstructure:skeleton:mesh', time=latest, data=getOutput('Field:Value',field=Displacement), domain=FaceBoundaryDomain(boundary='Zmax',side='FRONT'), sampling=FaceBoundarySampleSet(order=automatic), destination=MessageWindowStream())
OOF.Mesh.Analyze.Average(mesh='microstructure:skeleton:mesh', time=latest, data=getOutput('Field:Value',field=Displacement), domain=FaceBoundaryDomain(boundary='Zmin',side='FRONT'), sampling=FaceBoundarySampleSet(order=automatic), destination=MessageWindowStream())
