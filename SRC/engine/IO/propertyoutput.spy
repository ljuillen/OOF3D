# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov.

# The PropertyOutputRegistration subclasses create an Output object
# for each registered PropertyOutput.  This bridges the gap between
# the C++ PropertyOutputs and the more general Python Outputs.

from ooflib.SWIG.engine import ooferror2
from ooflib.common import debug
from ooflib.common import utils

class _PORegBase(PropertyOutputRegistration):

    # initializer is either a PropertyOutputValInit object, or None.
    # If it's None, a default initializer will be used, which
    # initializes the OutputVal to zero (or the equivalent).  Most of
    # the time, the default should be sufficient.
    # Subclasses' constructors must create an actual Output object and
    # pass it in here as the 'output' argument.
    def __init__(self, name, output, initializer=None):
        self.initializer = initializer
        self.output = output
        PropertyOutputRegistration.__init__(self, name)
        
    ## Callback for all PropertyOutputs.  Outputs that need to return
    ## something other than a list of OutputVal instances should
    ## override the convert method.
    def opfunc(self, mesh, elements, coords, **params):

        # params is a dictionary of parameter values keyed by
        # parameter names.  At this point, the values have already
        # been extracted from the Parameter objects.

        # instantiate is PropertyOutputRegistration.instantiate,
        # defined in propertyoutput.h.  It calls
        # PropertyOutputInit::instantiate and creates an instance of a
        # PropertyOutput subclass.
        po = self._instantiate(self.name(), params)

        # initializer initializes the OutputVal at each evaluation
        # point. If an initializer wasn't provided, the default
        # initializer just clones a zero-valued OutputVal.  The
        # initializer can't be set in _instantiate because its
        # constructor might need to retrieve parameters from the
        # Output.
        # Keep a reference to the initializer so that it persists
        # until the opfunc finishes.
        self.zeroObj = None
        if self.initializer is not None:
            self.initObj = self.initializer
        else:
            self.zeroObj = self.zeroVal(po)
            self.initObj = DefaultPropertyOutputValInit(self.zeroObj)
                        
        po.setInitializer(self.initObj)

        mesh.precompute_all_subproblems()
        results = []
        for element, ecoords, in zip(elements, coords):
            mat = element.material()
            if mat and not mat.self_consistent():
                raise ooferror2.ErrBadMaterial(element.material().name())
            mesh.begin_all_subproblems(element)
            results.extend(po.evaluate(mesh, element, ecoords))
            mesh.end_all_subproblems(element)
        return self.convert(results)
    def convert(self, results):
        return results

    def zeroVal(self, propout):
        # Subclasses must define this method, which returns "zero" in
        # the format desired for the output.  The argument is the
        # PropertyOutput object.
        ## TODO: Instead of passing the PropertyOutput, can we just
        ## pass in the parameter values?  An extra PropertyOutput is
        ## being created.
        raise ErrPyProgrammingError("%s.zeroVal is not defined!"
                                    % self.__class__.__name__)
    ## TODO: Do we need both zeroVal and instancefn? 
    def instancefn(self, output):
        # output is an Output that was built from a PropertyOutput.
        # Its params is a dict of Parameter objects keyed by name.  It
        # has to be converted into a dict of parameter values keyed by
        # name before begin passed to the C++
        # PropertyOutputRegistration for instantiation of the
        # PropertyOutput.
        pdict = {name:param.value for name,param in output.params.items()}
        propoutput = self._instantiate(self.name(), pdict)
        ## TODO: Can we just return propoutput?  Why are we calling
        ## zeroVal?
        return self.zeroVal(propoutput)

class ArithmeticPropertyOutputRegistration(_PORegBase):
    def __init__(self, name, output, initializer=None):
        output._allowsArithmetic = True
        _PORegBase.__init__(self, name, output, initializer)
    def _instantiate(self, name, params):
        return self.instantiateArithmetic(name, params)

class NonArithmeticPropertyOutputRegistration(_PORegBase):
    def __init__(self, name, output, initializer=None):
        output._allowsArithmetic = False
        _PORegBase.__init__(self, name, output, initializer)
    def _instantiate(self, name, params):
        return self.instantiateNonArithmetic(name, params)

# Concrete subclasses of ArithmeticPropertyOutputRegistration and
# NonArithmeticPropertyOutputRegistration are defined in
# propertyoutputreg.py.
