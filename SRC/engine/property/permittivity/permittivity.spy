# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 


from ooflib.common import utils
from ooflib.common.IO import parameter
from ooflib.common.IO import xmlmenudump
from ooflib.engine import problem
from ooflib.engine import propertyregistration
from ooflib.SWIG.engine import symmmatrix

PropertyRegistration = propertyregistration.PropertyRegistration

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Isotropic',
    IsoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",
    ordering=98,
    params=[parameter.FloatParameter('epsilon',
                                     1.0, tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Isotropic dielectric permittivity.",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/isopermittivity.xml')
    )

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## TRICLINIC

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Triclinic',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",105,
    params=[symmmatrix.TriclinicRank2TensorParameter(
        'epsilon',
        symmmatrix.TriclinicRank2Tensor(xx=1.0, yy=1.0, zz=1.0),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],   
    propertyType="DielectricPermittivity",
    tip="Triclinic dielectric permittivity",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## MONOCLINIC

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Monoclinic',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",104,
    params=[symmmatrix.MonoclinicRank2TensorParameter(
        'epsilon',
        symmmatrix.MonoclinicRank2Tensor(xx=1.0, yy=1.0, zz=1.0),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Monoclinic dielectric permittivity.",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## ORTHORHOMBIC

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Orthorhombic',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",103,
    params=[symmmatrix.OrthorhombicRank2TensorParameter(
        'epsilon',
        symmmatrix.OrthorhombicRank2Tensor(xx=1.0, yy=1.0, zz=1.0),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Orthorhombic dielectric permittivity.",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## TETRAGONAL

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Tetragonal',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",101,
    params=[symmmatrix.TetragonalRank2TensorParameter(
        'epsilon',
        symmmatrix.TetragonalRank2Tensor(xx=1.0, zz=1.0),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Tetragonal dielectric permittivity.",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## TRIGONAL

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Trigonal',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",102,
    params=[symmmatrix.TrigonalRank2TensorParameter(
        'epsilon',
        symmmatrix.TrigonalRank2Tensor(xx=1.0, zz=0.5),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Trigonal dielectric permittivity",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## HEXAGONAL

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Hexagonal',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",100,
    params=[symmmatrix.HexagonalRank2TensorParameter(
        'epsilon',
        symmmatrix.HexagonalRank2Tensor(xx=1.0, zz=0.5),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Hexagonal dielectric permittivity",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## CUBIC

reg = PropertyRegistration(
    'Electric:DielectricPermittivity:Anisotropic:Cubic',
    AnisoDielectricPermittivity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",99,
    params=[symmmatrix.CubicRank2TensorParameter(
        'epsilon',
        symmmatrix.CubicRank2Tensor(xx=1.0),
        tip=parameter.emptyTipString)],
    outputs=["Energy", "Material Constants:Electric:Dielectric Permittivity epsilon"],
    propertyType="DielectricPermittivity",
    tip="Cubic dielectric permittivity",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/anisopermittivity.xml'))

reg.fluxInfo(fluxes=[problem.Total_Polarization], fields=[problem.Voltage],
             time_derivs=[0])

## *Electric* BODY forces (sorry Andrew... --REG)

reg = PropertyRegistration(
    'Electric:SpaceCharge', ChargeDensity,
    "ooflib.SWIG.engine.property.permittivity.permittivity",150,
    params=[
        parameter.FloatParameter('charge', 0.0, 
                                 tip="electrostatic charge density")],
    outputs=["Material Constants:Electric:Space Charge"],
    propertyType="ChargeDensity",
    tip="Spatial charge density",
    discussion=xmlmenudump.loadFile(
        'DISCUSSIONS/engine/property/spacecharge.xml'))


reg.eqnInfo(equations=[problem.CoulombEquation])
