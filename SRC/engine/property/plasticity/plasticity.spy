# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

# Crystal plasticity.

from ooflib.engine import propertyregistration
from ooflib.engine import problem
from ooflib.engine.IO import anisocijkl
from ooflib.common.IO import parameter

PropertyRegistration = propertyregistration.PropertyRegistration

# Interposed class to convert the symmetry-specific cijkl into a
# generic cijkl, which is what the CPlasticity constructor takes, to
# hand off to the base plasticity class.
class CijklPlasticity(CPlasticity):
    def __init__(self, registration, name, cijkl):
        CPlasticity.__init__(self, registration, self,
                             name, cijkl.tensorForm())


class CubicPlasticity(CijklPlasticity):
    pass

reg = PropertyRegistration(
    'Mechanical:Plasticity:Cubic', CubicPlasticity,
    "ooflib.SWIG.engine.property.plasticity.plasticity",17,
    [anisocijkl.CubicCijklParameter(
        'cijkl', anisocijkl.CubicRank4TensorCij(c11=1.0,
                                                c12=0.5,
                                                c44=0.25),
        tip=parameter.emptyTipString)],
    outputs=[],
    propertyType="Plasticity",
    discussion=None)

reg.fluxInfo(fluxes=[problem.Stress], fields=[problem.Displacement],
             time_derivs=[0])


class TriclinicPlasticity(CijklPlasticity):
    pass

reg = PropertyRegistration(
    'Mechanical:Plasticity:Generic', TriclinicPlasticity,
    "ooflib.SWIG.engine.property.plasticity.plasticity",18,
    [anisocijkl.TriclinicCijklParameter(
        'cijkl',
        anisocijkl.TriclinicRank4TensorCij(c11=1.0, c12=0.5, c13=0.5, c14=0.0,
                                           c15=0.0, c16=0.0, c22=1.0, c23=0.5,
                                           c24=0.0, c25=0.0, c26=0.0, c33=1.0,
                                           c34=0.0, c35=0.0, c36=0.0, c44=0.25,
                                           c45=0.0, c46=0.0, c55=0.25, c56=0.0,
                                           c66=0.25),
        tip=parameter.emptyTipString)],
    outputs=[],
    propertyType="Plasticity",
    discussion=None)

reg.fluxInfo(fluxes=[problem.Stress], fields=[problem.Displacement],
             time_derivs=[0])
