// -*- text -*-
// $RCSfile: NOTES,v $
// $Revision: 1.1 $
// $Author: reida $
// $Date: 2001-12-04 15:55:54 $

Notes on the tests

-- teststiffness --------------------------------------------

Compares stiffness matrices generated by oof2 with those generated by
Mathematica or oof1.  The matrices are for 2d-elastic systems with
no boundary conditions. (hexagonal symmetry with c11=c22=1, c12=0.5,
all other c's are zero.)

The OOF2 test program teststiffness generates the stiffness matrices,
which are compared with the following files using mtx_compare:

K_oof1_1x1:  1x1 linear triangular mesh generated by OOF1
       oof-g -text -quit -start K_oof1_1x1.log
       tail +2 Kii | tbird -p '$(1)-1, $(2)-1, -$(3)' > K_oof1_1x1
       rm Kii

generated by Mathematica:
threenode1x1.mtx: 1x1 linear triangular
threenode3x3.mtx: 3x3 linear triangular
fournode1x1.mtx:  1x1 linear quadrilateral
fournode3x3.mtx:  3x3 linear quadrilateral

generated by teststiffness
teststiffness -n 1 -3 > K_1x1_tri3
teststiffness -n 3 -3 > K_3x3_tri3
teststiffness -n 1 -4 > K_1x1_quad4
teststiffness -n 3 -4 > K_3x3_quad4
teststiffness -n 1 -3 -o 2 > K_1x1_tri6
teststiffness -n 1 -4 -o 2 > K_1x1_quad8
teststiffness -n 3 -3 -o 2 > K_3x3_tri6
teststiffness -n 3 -4 -o 2 > K_3x3_quad8

-- run_testbdys --------------------------------------------------

  Currently, this is preliminary.  It is useful now for detecting
changes in the behavior of the boundaries, but not their actual
correctness, until/unless the comparsion files are generated
independently of OOF2, or checked against OOF1, or something.
This should be done soon.

  run_testbdys.py is a Python script that does several combinations
of boundary conditions on triangluar 3x3 lattices.  The upper
boundary is always an edge boundary, and the lower one is always
a point boundary.  The format for the "bdy" file-names is:

  bdy_<size>_<element geometry>_<parametricity>_<upper cond>_<lower cond>

  ...so that, for instance, bdy_3x3_tri_iso_ufix_lfix is a 3x3 
mesh of triangular elements, isoparametric, with upper and lower
boundaries fixed.

  The comparison is just done by doing direct DIFF's on the files,
which could make cross-platform checks problematic.  Originals were
run on "ruth" in debug mode.

-- t_exp_*.dat ---------------------------------------------------

These are matrix and right-hand side files used in investigating 
a possible problem with the solver.  They are readable by the 
"testsolver" program, which can be compiled from the global make
file.  The matrices were generated from a thermal-expansion problem,
with a 3x3 array of subparametric quadrilateral elements, with 
different orderings for the degrees of freedom, relative to the 
equations.  For both matrices, the equations were defined in 
the order (heat_eqn, forcebalance_eqn), and for the "fwd" matrix,
the fields were activated in the order (temperature, displacement).
For the "rvs" matrix, the fields were activated in the opposite 
order.  
  The "rhs" file is the actual right-hand side corresponding to 
T=0 on the left boundary, T=5 on the right, displacement y fixed
on the bottom, and x fixed on the lower-left corner.
  The correct solution has values of order unity and satisfies 
testsolver's remultiplication check.  The pathological solution
has values ranging from order unity to order hundreds, and fails
the remultiplication check.


