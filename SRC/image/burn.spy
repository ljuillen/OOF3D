# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov.

from ooflib.SWIG.common import config
from ooflib.SWIG.common.IO import vtkutils
from ooflib.SWIG.image import pixelselectioncourieri
from ooflib.common import debug
from ooflib.common import enum
from ooflib.common import pixelselection
from ooflib.common import primitives
from ooflib.common import utils
from ooflib.common.IO import parameter
from ooflib.common.IO import pixelselectionmenu
from ooflib.common.IO import pointparameter
from ooflib.common.IO import xmlmenudump


class ColorNorm(enum.EnumClass(
    ('L1', 'The sum of the absolute values of the RGB differences.'),
    ('L2',
     'The square root of the sum of the squares of the RGB differences.'))):
    tip="Ways of measuring the difference between two colors."
    discussion=xmlmenudump.loadFile('DISCUSSIONS/image/enum/colornorm.xml')
    
L1 = ColorNorm('L1')
L2 = ColorNorm('L2')
utils.OOFdefine('ColorNorm', ColorNorm)

BurnSelection = pixelselectioncourieri.BurnSelection

class Burn(pixelselection.VoxelSelectionMethod):
    def __init__(self, point, local_flammability, global_flammability,
                 color_space_norm, next_nearest, operator):
        self.point = point
        self.local_flammability = local_flammability
        self.global_flammability = global_flammability
        self.color_space_norm = color_space_norm
        self.next_nearest = next_nearest
        self.operator = operator
    def select(self, source, selection):
        ms = source.getMicrostructure()
        startpt = ms.pixelFromPoint(self.point)
        image = source.getObject()
        if source.getSelectionContext().getObject().checkpixel(startpt):
            b = BasicBurner(self.local_flammability, self.global_flammability,
                            self.color_space_norm==L2, self.next_nearest)
            self.operator.operate(
                selection,
                BurnSelection(ms, b, source.getObject(), startpt))
        

burnSelectorRegistration = pixelselection.VoxelSelectionMethodRegistration(
    'Burn',
    Burn,
    ordering=1.0,
    params=[
        pointparameter.PointParameter('point'),
        parameter.FloatRangeParameter(
            'local_flammability',
            range=(0, 1, 0.001), value=0.1,
            tip="Maximum difference in neighboring pixel values"
            " across which a burn will extend."),
        parameter.FloatRangeParameter(
            'global_flammability',
            range=(0, 1, 0.001), value=0.2,
            tip="Difference from initial pixel value beyond which a burn"
            " will not spread."),
        enum.EnumParameter(
            'color_space_norm', ColorNorm, value=L1,
            tip="How to compute the difference between two colors in RGB space."
        ),
        parameter.BooleanParameter(
            'next_nearest', value=0,
            tip="Burn next-nearest neighbors?"),
        pixelselectionmenu.passiveOperatorParam
    ],
    events=['up'],
    whoclasses=['Image'],
    tip="Select a contiguous set of similar pixels,"
    " using a forest fire algorithm.",
    discussion=xmlmenudump.loadFile('DISCUSSIONS/image/reg/burn.xml'))


