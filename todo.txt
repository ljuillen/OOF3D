TODO LIST FOR OOF3D

Before Next Release
-------------------

Optimize categoryVolumes?

Merge branches
  Ryan's 3D widgets  (Needs to be finished for voxel selection)
  Lizhong's solvers.

Use tcmalloc (already in Lizhong's branch?)

Use Eigen?  Use DPF's sparse_matrix_optimization branch?
  On 7/17/17, merged origin/development into
  sparse_matrix_optimization.  The difference in performance on
  solver_test.py/static_quadratic_set was negligible.

Fix bugs in OOFImage3D::threshold.  See TODO in oofimage3d.C.
  * After using it, voxel selections don't appear properly in the
    graphics window -- they're gray and are in the wrong place.
    Probably the image has changed its storage format.
  * Applying it twice yields garbage, or worse.
  
Soon
----

Upgrade VTK

User-settable behavior for mouse buttons, so that more than one mouse
button can be used and it's not necessary to use the
Select/Tumble/Dolly/etc buttons at the top of the canvas.  Also enable
scroll wheels.
  
Reduce memory use by optionally using chars instead of ints for the
voxel category: CMicrostructure::categorymap is Array<char>.   Can
images be stored with fewer bytes?  Make the type of a category be
settable at build time, in case users need more than 256 categories?

Profile VSB construction on a large image with complicated category
structures.  Does it need to be optimized?  See TODO in
CMicrostructure::categorize() wrt not creating the full array of
ProtoVSBNodes.

categoryVolumes can probably be sped up by dividing each VSB into
chunks of a predetermined size.  Then the bounding box of each chunk
can be compared to the element's bounding box before the r3d
calculation, and many chunks can be skipped.  The final result will be
the sum over chunks.  The optimal size of the chunk will have to be
determined.

Write a python build script that doesn't use distutils.
Move swig output to the build directory, and remove SRC/SWIG3D).  The
way it is now, building dist3d after building debug3d fails, because
the swig output files contain code generated from #ifdef DEBUG blocks,
but those output files are in SRC/SWIG3D and aren't rebuilt when the
build options are changed.  Do this in 2D too.

Move output operations to C++.  See TODO in
FilledContourDisplay.setData in engine/IO/contourdisplay.py.


At Some Later Time
------------------

Parallelize categoryVolumes.

Migrate to Python 3.x

Convert pixel category array to octree, and construct voxel set
boundaries from the octree, or compute element homogeneity from octree
elements instead of voxels.  Maybe.



BUGS TO FIX

Display a contour plot.  Set contour display's filter to "Selected".
Select a (skeleton) element.  Crash!  Selecting an element before
setting the filter doesn't crash.
 The problem is that selecting the element changes the filter's
 output, but doesn't change the filter parameter of the
 FilledContourDisplay, so FilledContourDisplay.setData isn't called.


Contour displays are incorrect when the elements are filtered.
  Same problem as above, probably.

