TODO LIST FOR OOF3D


Before Next Release
-------------------

Optimize categoryVolumes?

Merge branches
  Ryan's 3D widgets  (Needs to be finished for voxel selection)
  Lizhong's solvers.

Use tcmalloc (already in Lizhong's branch?)

Use Eigen?  Use DPF's sparse_matrix_optimization branch?
  On 7/17/17, merged origin/development into
  sparse_matrix_optimization.  The difference in performance on
  solver_test.py/static_quadratic_set was negligible.


Remove opacity param from MicrostructureMaterialDisplay?  Is it used?
It's passed through to vtkActor::GetProperty()->SetOpacity(), but it
doesn't have any effect on what's displayed.  Also, there's a TODO
asking if ImageCanvasLayer::set_opacity() works.

Fix bug: Using upper-right corner arrows for switching views sometimes
draws the canvas in the wrong location.

Fix bug: Typing to select a line in the file chooser isn't working on Mac.

Fix bug or badly designed feature: Select voxels or skeleton
components while a clipping plane plane-and-arrow widget is displayed.
It's not clear whether clicking on the widget should be interpreted as
a selection operation or not.   Probably the widget should not be
visible unless the Viewer toolbox is active.

Fix bug?  Drag and drop on layer list on Mac/Cocoa can result in
duplicate entries in list, and the layers aren't actually reordered.
The signal for deleting the list entry isn't being sent.  Doing
anything that forces the list to be redrawn fixes it.


---------------------------------------------------------------------------
Soon
----

Add a surface-smoothness-energy so surface smoothing works better.

User-settable behavior for mouse buttons, so that more than one mouse
button can be used and it's not necessary to use the
Select/Tumble/Dolly/etc buttons at the top of the canvas.  Also enable
scroll wheels.
  
Reduce memory use by optionally using chars instead of ints for the
voxel category: CMicrostructure::categorymap is Array<char>.   Can
images be stored with fewer bytes?  Make the type of a category be
settable at build time, in case users need more than 256 categories?

Profile VSB construction on a large image with complicated category
structures.  Does it need to be optimized?  See TODO in
CMicrostructure::categorize() wrt not creating the full array of
ProtoVSBNodes.

Write a python build script that doesn't use distutils.
Move swig output to the build directory, and remove SRC/SWIG3D).  The
way it is now, building dist3d after building debug3d fails, because
the swig output files contain code generated from #ifdef DEBUG blocks,
but those output files are in SRC/SWIG3D and aren't rebuilt when the
build options are changed.  Do this in 2D too.

Move output operations to C++.  See TODO in
FilledContourDisplay.setData in engine/IO/contourdisplay.py.

Write CSkeletonFace::homogeneity()

Allow graphics windows to be synched, so that view changes in one are
done in all.

Change AutoWidgets so that they return automatic.automatic if the text
box is empty.  Get rid of the check button.  See TODO in
parameterwidgets.py.

----------------------------------------------------------------------------
At Some Later Time
------------------

Parallelize categoryVolumes.

Migrate to Python 3.x

Convert pixel category array to octree, and construct voxel set
boundaries from the octree, or compute element homogeneity from octree
elements instead of voxels.  Maybe.



BUGS TO FIX

Display a contour plot.  Set contour display's filter to "Selected".
Select a (skeleton) element.  Crash!  Selecting an element before
setting the filter doesn't crash.
 The problem is that selecting the element changes the filter's
 output, but doesn't change the filter parameter of the
 FilledContourDisplay, so FilledContourDisplay.setData isn't called.


Contour displays are incorrect when the elements are filtered.
  Same problem as above, probably.


-------------------------------------------------------------------------
-------------------------------------------------------------------------

FIXED OR OTHERWISE DISPOSED OF

Fix bug:  open two graphics windows on Linux.  Close the first one with the
window manager close button.  The program will crash.
Changes that prevent crashing:
   Comment out call to Render
   Run on Mac with Cocoa
Changes that don't prevent crashing:
   Don't add renderer to render_window.
   Remove renderer from render_window at start of destroyCB.
   Toolboxes aren't removed in GfxWindowBase.destroyCB.
   No layers created (immediate return in createPredefinedLayers,
      don't create axes)
   Switch to vtk8. -- Crashes when closing just 1 graphics window, using
     either the menu item (seg fault) or the window manager (X11 error),
     even when Render call is commented out.
     * Seg fault is in
       PlaneAndArrowLayer::destroy->OOFCanvasLayer::removeAllProps. When
       no layers are defined, closing with either the menu item or the
       window manager leads to the X11 error, so there may be two
       separate problems.  Fixed that... Now there's an x11 error in both cases.
** Fixed 2017-12-05


Upgrade VTK
** Finished(?) 2017-12-05

Fix this TODO in ghostgfxwindow.py: After cloning a window containing
only a hidden image layer and showing the layer in the clone, the
image is drawn at the wrong size and with a black border. Making any
change to the view fixes it.
** Can't reproduce with vtk 7.1.1, 2017-12-06

Mesh Material display not working?
** Fixed 2017-12-06  CellData wasn't being included in MeshGridSource::GetGrid

Fix bug: Adjust gfx window main pane divider, then clone window.
Canvas size and divider position don't agree.  Clicking on canvas may
select the wrong item.  Also, if the graphics window is created in a
script, the canvas is the wrong size when the window opens.
** Fixed 2017-12-15 as part of the next item.
Fix bug: Loading a script containing a Graphics.Settings.Camera.View
command can leave the render window misaligned with the drawing
area. The size_x and size_y arguments should be removed.  The View
object shouldn't include size information.
** Fixed 2017-12-15.  The size information is needed to properly record
and reproduce mouse clicks. GhostOOFCanvas:set_view should ignore the
size information *except* when reproducing mouse clicks.

Fix bug: Skeleton Info display isn't working.  Is Mesh Info working?
** Fixed 2017-12-15.  setEmpty() wasn't being called.  Pixel Info and
Mesh Info weren't working either.

Fix bug: Displaying filtered Skeletons and Meshes leads to errors
like:
Warning: In /Users/langer/UTIL/VTK/VTK-8.1.0.rc2/Common/DataModel/vtkDataSet.cxx, line 476
vtkUnstructuredGrid (0x7fd2d39a6cc0): Cell array  with 1 components, has 1871 tuples but there are only 689 cells
eg, SCRATCH/meshmaterialdisplay2.log: Load 5color, group voxels, assign 2
materials to groups, display mesh material filtered by one material.
Wrong materials are shown, and get error.
** Fixed 2017-12-18  Had to reset cell data in MaterialDisplay.setParams.

Mesh filled contour display not working?
** Seems to be ok.  2017-12-18  Probably because of the above.

Try calling vtkRenderWindow::SetUseOffScreenBuffers(1).  It caused
problems before, but other things have been fixed since then.  It
might reduce graphics flickering on the VMs.
** Doesn't seem to help.  2017-12-18

Fix bug: Clearing groups (individually or all at once) doesn't clear
the display when a Skeleton display is filtered by group.
  Group changes aren't leading to SkeletonGridSource::GetGrid
  Filters need to be notified that their groups have changed, and they
  can call SkeletonFilter::setModified.
** Fixed 2017-12-19 by copying the code that already did this from
ContourDisplay.

Fix bug: Display skeleton filtered by element group.  Edit layer.
Wrong group is displayed initially for filter param in dialog box.
Problem occurs in other ElementGroupParameter widgets too.
** Fixed 2017-12-19.  SkeletonGroupWidgets had no set_value method and
weren't calling it in their __init__.  OOF2 appears to have the same problem.

Fix bug: Are element groups/materials not being recomputed for
refinement undo/redo?  Or are filters on the skeleton displays not
updating?
  Use Auto to create element groups.
  Display skeleton edges and materials limited to some groups.
  Undo/Redo refinement
  Elements in other groups appear.
** Fixed? 2017-12-19  I can't reproduce this.  Maybe it's been fixed,
or maybe it was based on a misunderstanding.  Material inheritance is
different from group inheritance, so it's possible that element groups
created from pixel groups will contain more than one material after
refinement, even if the pixel groups correspond 1:1 to materials.

Missing feature: contextual menu in layer list.
** Added. 2018-01-19

Tumbling large images or Microstruture Material displays can be very
slow because it takes a long time to recompute the center point.
Either find a faster way to compute the center, or make computing the
center optional and re-use the old point.
** Done, but not removed from the todo list until later...

Missing feature: raise and lower layers, by menu or drag-and-drop.
** 2018-01-19: Revived the OOF2 raising and lowering menu items and GUI.
Still need to implement DisplayMethod.raise_layer and
DisplayMethod.lower_layer.  Layer ordering will have to translate to
SetRelativeCoincidentTopologyPolygonOffsetParameters parameters.
** 2018-01-2?  Done.  Needs vtk bug fix. Version 9.0.0 has it.

Fix bug?  Edit a clipping plane by double-clicking in the list in the
toolbox, and change the convertible RC to "angles". It's possible to
get the error "Parameter value out of range for phi".
**  Fixed.  2018-01-31  atan2 returns -180->180 angles, but
AngleDirection was expecting 0->360.

