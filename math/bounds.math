(* 
   $RCSfile: bounds.math,v $
   $Revision: 1.15 $
   $Author: reida $
   $Date: 2001-04-12 20:29:20 $
            *)

(* Mathematica model of an array of 4-element quadrilateral 
   nodes, to which various boundary conditions will be applied
   with a view to grasping what needs to be done.  Consequently,
   the structure will mimic that of the OOF2 software, to the
   degree that I understand it and think it's relevant. *)

(* The basic approach is to set up both bulk-integrating
   and line-integrating machinery, using the same set of 
   nodes. *)

(* The physics of the system, at least initially, will be 
   2D stress and strain. *)

Nodes:={{ 0, 0}, { 1/3, 0}, { 2/3, 0}, { 1, 0},
        { 0, 1/3}, { 1/3, 1/3}, { 2/3, 1/3}, { 1, 1/3},
        { 0, 2/3}, { 1/3, 2/3}, { 2/3, 2/3}, { 1, 2/3},
        { 0, 1}, { 1/3, 1}, { 2/3, 1}, { 1, 1}} 


(* Nodes:={{ 0, 0}, { 1, 0}, { 0, 1}, { 1, 1}}  *)


(* Elements are defined by indexes into the node array *)

Elements:={{1,2,6,5},{2,3,7,6},{3,4,8,7},
           {5,6,10,9},{6,7,11,10},{7,8,12,11},
           {9,10,14,13},{10,11,15,14},{11,12,16,15}}


(* Boundary elements add another level of indirection.
   This "Bdy" list either contains zero, if the corresponding
   element does not have a nontrivial boundary condition, or
   else it contains a list of node indices which define the
   boundary to which the condition is applied.  These are
   the *local* node indices, between 1 and 4, not the global
   node indices.  Comparison to zero should be done using
   "SameQ" so that if the comparison fails, you just get
   "False" instead of some unwieldy expression from hell.

     The reason for doing the extra indirection is that
   you need information from the element to evaluate the
   boundary condition.
     In paritcular, the element machinery already knows how
   to compute the strain, which is needed to figure out the
   line-integral contribution to the stiffness matrix for
   that particular boundary condition, which is the one 
   under study at the moment.  
     In this instance, the boundary in question is the 
   line y=0, that is to say, the lower boundary of the
   system, consisting of local nodes 1 and 2 of each of
   elements 1 through 3. *)

(******* BOUNDARY CONDITIONS *******)

kval=-10;
prefu={0,1/5};

strn={{-1/10, 0},{0, -1/10}};


(* Bdy:={{1,2},{1,2},{1,2},0,0,0,{3,4,kval,prefu},{3,4,kval,prefu},
{3,4,kval,prefu}} *)

(* Bdy:={0,0,0, 0,0,0, 0,0,0} *)
Bdy:= {{1,2},{1,2},{1,2},0,0,0,{3,4,strn},{3,4,strn},{3,4,strn}}


(* The new, new boundary conditions are "springy", what the
   book calls "Generalized Natural", which means in essence
   that the surface traction depends on how far away you are.
   These are specified by the spring constant in the third
   position, and the preferred displacement value in the 
   fourth position.  Both components must be specified. 
   See the notes in bounds_3node.math for the ravings
   which accompanied actual development. *)

(* Shape functions in the master space, assuming origin
   at (-1,-1) and upper right hand corner at (1,1), which is
   the usual way, shape functions are tabulated in books. *)

(* xi and zeta are default coordinates in the master space.  
   Apparently-unmotivated derivatives with respect to xi and zeta
   may appear elsewhere because of this. *)

MasterFns:={ (1/4)*(1-xi)*(1-zeta), (1/4)*(1+xi)*(1-zeta),
             (1/4)*(1+xi)*(1+zeta), (1/4)*(1-xi)*(1+zeta) }

BdyMaster:={ (1/2)*(1-xi), (1/2)*(1+xi) }


(* Elasticity:  Avoid potential errors from Voigt 
   notation by just building the four-component matrix
   of elastic constants.  It's supposed to have eigenstrains
   of uxx+uyy, with coefficient cfa, and uxx-uyy and uxy with
   coefficient cfb. *)

(* There used to be a problem with factors of two in the
   stresses, but it's fixed now.  The main thing is to 
   arrange the coefficients so that, with two coefs only,
   you still get isotropy.  A good exercise for the near
   future would be to express the Poisson's ratio in 
   terms of cfa and cfb. *)

(************************************************************)
(*********************    PHYSICS   *************************)
(************************************************************)


(* The idea is to have a global energy given by 
   (1/2)*cfa* e1^2 + (1/2)*cfb * (e2^2 + e3^2), 
   where e1=uxx+uyy, e2=uxx-uyy, e3=uxy.  This
   combination does the job. *)

cfa:=(3/2)    (* Bulk *)

cfb:=(1/2)    (* Shear *)

Cmtx:={ { {{(1/2)*(cfa+cfb), 0}, {0, (1/2)*(cfa-cfb)}}, 
                   {{0, cfb/2},{cfb/2, 0}} },
        {          {{0, cfb/2},{cfb/2, 0}}, 
          {{(1/2)*(cfa-cfb), 0}, {0, (1/2)*(cfa+cfb)}} } }

(* External force should be a function of x and y, not 
   xi and zeta -- forces exist in real space. *)

Forcefn[x_,y_]:={0,0}

(*************************************************************)
(*************************************************************)

(* The required technique seems to be to assign values
   to the various functions mtx[i,j], then actually build
   the matrix from the table with Array[mtx, {N, N}]. *)

(* Need a convention for mapping from nodes to DOF/RHS 
   indices -- one-based index makes this stupid, but we can
   survive.  2*i-1 is x-component, 2*i is corresponding
   y component. *)

(* Generate a real-space position from node indices. Result is
   the vector {x(xi,zeta),y(xi,zeta)} *)

FromMaster[el_]:={Simplify[ 
                     Sum[Nodes[[el[[i]]]][[1]]*MasterFns[[i]], {i,1,4}]],
                    Simplify[ 
                     Sum[Nodes[[el[[i]]]][[2]]*MasterFns[[i]], {i,1,4}]] }


BdyFrmMstr[bel_]:={Simplify[
                     Sum[Nodes[[bel[[i]]]][[1]]*BdyMaster[[i]],{i,1,2}]], 
                   Simplify[
                     Sum[Nodes[[bel[[i]]]][[2]]*BdyMaster[[i]],{i,1,2}]] }

(* Jacobian of the coordinate transformation -- unfortunately
   "Jacobian" is a Mathematica reserved word.  Just for 
   clarity, what this means in the coords here is:
   
    (df/dxi, df/dzeta) = J.(df/dx, df/dy)     

   If we stick to linear four-noded elements, this should always
   be a matrix of constants, but the general case may be of some
   interest later.   *)

Jacobn[el_]:=Module[{evec},
  evec=FromMaster[el];
  {{D[evec[[1]],xi], D[evec[[2]],xi]},
   {D[evec[[1]],zeta], D[evec[[2]],zeta]}} ]


(* For boundary case, there's only one dimension in the
   master space, so the Jacobian is a vector.  
   It's still true that (df/dxi) = J.(df/dx, df/dy). *)
(* The "bel" here is a (two-element) list of global node numbers. *)

BJacbn[bel_]:=Module[{evec},
  evec=BdyFrmMstr[bel];
  {D[evec[[1]],xi], D[evec[[2]],xi]} ]


(* A handy component-selection tool for Fklm. *)


Slct[k_,m_]:=If[ ((k==1)&&(OddQ[m]))||((k==2)&&(EvenQ[m])), 1, 0]





(* The object Fklm is the strain tensor as it appears
   in the integrand, for both the bulk and boundary
   terms.  k and l are ordinary spatial indices, and m
   index the degree of freedom, i.e. the column of the
   stiffness matrix.  Odd m's correspond to the x component
   of the displacement field, and even m's to the y component,
   in node order starting from 1. *)

(* Fklm will only be called for those m's which are relevant in
   a given element.  "el" is the element, "m" is the global
   degree of freedom index, and "idx" is the index, for *this*
   element, of the shapefunction corresponding to the node 
   idicated by m.

   Nonsensical calls are not checked for.   *)

Fkl[el_,m_,idx_]:=Module[{tbl},
  tbl:=Table[ Slct[k,m]*Inverse[Jacobn[el]].
              {D[MasterFns[[idx]],xi],D[MasterFns[[idx]],zeta]}, {k,1,2}];
  (1/2)*(tbl+Transpose[tbl]) ]


(* Variant Bfkl is for boundaries.  It's similar to Fkl, but
   it should return a function of xi only, with xi running 
   from -1 to 1 along the appropriate boundary.  We can do this
   because we know (a) the sequence of local indices in 
   master space, and (b) the starting local index for the
   edge, because that's what gets passed in.  *)

(* This function is used to evaluate the surface integral
   contribution to the stiffness matrix, which might never
   be needed, but in case it is, I'm not deleting it. 
   It's commented out, though.

Bfkl[el_,m_,bel_,cmp_]:=Module[{tbl,idx,strain},
  idx=bel[[cmp]];
  tbl:=Table[ Slct[k,m]*Inverse[Jacobn[el]].
              {D[MasterFns[[idx]],xi],D[MasterFns[[idx]],zeta]},{k,1,2}];
  strain=(1/2)*(tbl+Transpose[tbl]);
  
  Switch[ bel, 
      {1, 2},  strain /. zeta-> -1,
      {2, 3},  strain /. {xi->1, zeta->xi},
      {3, 4},  strain /. {zeta->1, xi->-xi},
      {4, 1},  strain /. {xi->-1, zeta->-xi} ]
]  

   end of commented-out-ness. *)


(* Test-function differentiator, takes derivative with respect to 
   real-space components of the shape function idx for element el.
   Returns a vector, with the order (d/dx, d/dy).  *)

Tset[el_,idx_]:=Module[{},
   Inverse[Jacobn[el]].{D[MasterFns[[idx]],xi],D[MasterFns[[idx]],zeta]} ]




(* Integrator.  If we're sticking to quadrilateral elements,
   master space is always from -1 to 1 in both dimensions. *)

Igt[arg_,el_]:=Integrate[ arg*Det[Jacobn[el]],{xi,-1,1},{zeta,-1,1}]


(* Boundary integrator.  More complicated -- the magnitude of
   the "Jacobian vector" normalizes lengths.  This is something
   of a trap, but should be OK for linear 1D shape functions, 
   where everything is really a constant. *)

(* Again, bel should be a two-element list of global node numbers. *)
Bigt[arg_,bel_]:=Module[{bvc},
  bvc=BJacbn[bel];
  Integrate[ arg*Sqrt[bvc.bvc], {xi,-1,1}]
]


(* Index-contraction routine, because Mathematica insists on contracting
   adjacent indices only. *)
  
Ctrct[stf_,strn_]:=Module[{i,j,k,l},
  Table[ Sum[Sum[ stf[[i]][[j]][[k]][[l]]*strn[[k]][[l]], {l,1,2}],{k,1,2}],
          {i,1,2},{j,1,2}] ]





(* Element-handling routine.  For a given element, for each 
   degree of freedom, this routine first builds the strain
   tensor contribution, multiplies it by the elastic
   stiffness (to get what OOF calls the "flux matrix"),
   then figures out the rows and contracts all indices 
   except those which index the global stiffness matrix.
   Then, it performs the integration. *)

(* Variables a bit weird -- "ukl" is strain tensor, "flux" is 
   Cijkl*ukl, a 2x2 tensor.  "tvec" is the vector of real-space
   derivatives of the current shape function, and igand is the
   vector of integrands, one for each compoenent of the 
   corresponding force. *)

Elcontrib[el_]:=Module[{i,j,m,p,ukl,flux,tvec,igand,fvec,xy},
  xy=FromMaster[el];
  For[i=1,i<=4,i++,
    m=2*el[[i]]-1;  (* X-component *)

(* Forces are already on the right-hand side, no sign change. *)
    fvec=Forcefn[xy[[1]],xy[[2]]]; 
    rhs[m]-=Igt[fvec[[1]],el];
    rhs[m+1]-=Igt[fvec[[2]],el];

    ukl=Fkl[el,m,i];
    flux=Ctrct[Cmtx,ukl];
    For[j=1,j<=4,j++,
      tvec=Tset[el,j];
      igand=tvec.flux;  (* Left-multiply -- shouldn't matter. *)
      p=2*el[[j]]-1;                       (* For x-component *)
      stiffness[p,m]-=Igt[igand[[1]],el];
      stiffness[p+1,m]-=Igt[igand[[2]],el]; (* y-component *)    
    ];
    m=m+1; (* y-component *)
    ukl=Fkl[el,m,i];
    flux=Ctrct[Cmtx,ukl];
    For[j=1,j<=4,j++,
      tvec=Tset[el,j];
      igand=tvec.flux;
      p=2*el[[j]]-1;
      stiffness[p,m]-=Igt[igand[[1]],el];
      stiffness[p+1,m]-=Igt[igand[[2]],el];
    ];
  ];
]

(* Boundary contribution.  "gbel" is where all the indirection
   is resolved, and is itself a list global nodelist numbers.
   In some cases (i.e. the call to Fkl) you need the local
   (to the element) nodelist number -- this is blist[[i]] *)
 
(* With regard to the notes -- gbel[[j]] is the global node
   index mu, and gbel[[i]] is the node index nu, and the
   i and j here are unrelated to the i and j of the
   matrix of elastic constants, those are implicit here. *)

(* "cvec" is the normalized vector (in xy-space) which points
   along the length of the boundary, and "nrm" is the right-side
   normal. *)

(* This is the *old* Bdycontrib, that works out the contribution
   of the surface integral to the stiffness matrix, but probably
   does so incorrectly -- the first part of the integrand,
   BdyFrmMstr, is co-ordinate dependent.  However, it doesn't
   matter (for now) because it's all commented out now, along
   with the companion "Bfkl" function. 

;; Bdycontrib[el_,blist_]:=Module[{gbel,i,j,m,p,ukl,flux,cvec,cmag,nrm,igand},

  If[UnsameQ[blist,0],
    gbel={el[[blist[[1]]]],el[[blist[[2]]]]};

    cvec=Nodes[[gbel[[2]]]]-Nodes[[gbel[[1]]]];
    cmag=Sqrt[cvec.cvec];
    cvec=cvec/cmag;
    nrm={cvec[[2]], -cvec[[1]]};

    For[i=1,i<=2,i++,
      m=2*gbel[[i]]-1;
      ukl=Bfkl[el,m,blist,i]; 
      flux=Ctrct[Cmtx,ukl];
      For[j=1,j<=2,j++,
        p=2*gbel[[j]]-1;
        igand=(BdyFrmMstr[gbel].cvec)*(nrm.flux);
        stiffness[p,m]+=Bigt[igand[[1]],gbel];
        stiffness[p+1,m]+=Bigt[igand[[2]],gbel];
      ];
      m=m+1;
      ukl=Bfkl[el,m,blist,i];
      flux=Ctrct[Cmtx,ukl];
      For[j=1,j<=2,j++,
        p=2*gbel[[j]]-1;
        igand=(BdyFrmMstr[gbel].cvec)*(nrm.flux);
        stiffness[p,m]+=Bigt[igand[[1]],gbel];
        stiffness[p+1,m]+=Bigt[igand[[2]],gbel];
      ];
    ];
  ];
]
   end of commented-outed-ness.... *)

(* The real Bdycontrib, for force boundary conditions. *)
(* cvec and cmag not actually needed, because the length
   normalization is taken care of by Bigt, and the 
   direction-in-space part is implicit in the global node
   coordinates. *)

Bdycontrib[el_,blist_]:=Module[{gbel,j,m,p,flux,cvec,cmag,nrm,igand},

  If[(Length[blist]==3),
    gbel={el[[blist[[1]]]],el[[blist[[2]]]]};
    cvec=Nodes[[gbel[[2]]]]-Nodes[[gbel[[1]]]];
    cmag=Sqrt[cvec.cvec];
    cvec=cvec/cmag;
    nrm={cvec[[2]],-cvec[[1]]};
    flux=blist[[3]];
    For[j=1,j<=2,j++,
      p=2*gbel[[j]]-1;
      igand=BdyMaster[[j]]*(nrm.flux);
      rhs[p]-=Bigt[igand[[1]],gbel];
      rhs[p+1]-=Bigt[igand[[2]],gbel];
    ];
  ];
 
  If[(Length[blist]==4),
    gbel={el[[blist[[1]]]],el[[blist[[2]]]]};
    cvec=Nodes[[gbel[[2]]]]-Nodes[[gbel[[1]]]];
    cmag=Sqrt[cvec.cvec];
    cvec=cvec/cmag;
    nrm={cvec[[2]],-cvec[[1]]};
    For[i=1,i<=2,i++,
      rowfn=BdyMaster[[i]]; 
      m=2*gbel[[i]]-1;
      rhs[m]+=Bigt[rowfn*blist[[3]]*blist[[4]][[1]],gbel];
      rhs[m+1]+=Bigt[rowfn*blist[[3]]*blist[[4]][[2]],gbel];
      For[j=1,j<=2,j++,
        p=2*gbel[[j]]-1;
        colfn=BdyMaster[[j]];
        (* Matrix contrib is only nonzero if components match! *)
        stiffness[p,m]+=Bigt[rowfn*colfn*blist[[3]],gbel];
        stiffness[p+1,m+1]+=Bigt[rowfn*colfn*blist[[3]],gbel];
      ];
    ];
  ];
]


(* Iterate over elements, plus actually
   building up the stiffness matrix from the functional
   components.  *)

MakeMatrix:=Module[{},
  GStiffness:=Array[stiffness,{2*Length[Nodes], 2*Length[Nodes]} ] ]
 
MakeRHS:=Module[{},
  GRHS:=Array[rhs,{2*Length[Nodes]}] ]          
      
Main:=Module[{i,j,el},
  For[i=1,i<=2*Length[Nodes],i++,
    rhs[i]=0;
    For[j=1,j<=2*Length[Nodes],j++,
      stiffness[i,j]=0;
    ];
  ];

  For[i=1,i<=Length[Elements],i++,
    el=Elements[[i]];
    Elcontrib[el];
    Bdycontrib[el,Bdy[[i]]];
  ];

(* Write the functions into actual matrices. *)
  MakeMatrix[];
  MakeRHS[];
]

(* For the fixed boundary-condition case:

  Before solving, it is necessary to partition the matrix into
known and unknown submatrices, and then solve the part you 
actually can do, substituting the known degrees of freedom
as required.  In the real OOF software, this will be taken
care of by the initial user interface (to partition) and 
the solver (to substitute correctly), but here it has to be
done manually, so to speak.  *)

(******************************************************************)
(* Utility stuff *)

(* Draw a picture of a solution.  Useful for looking at 
   results, and also for eigenvectors of the stiffness matrix. *)
(* sol is the input solution vector, mag is a magnification factor for
   the displacements. *)
(* First version just draws each element, which means all 
   internal lines are drawn twice.   
   Next level of sophistication is to add the undistorted
   system, in gray. *)

Drawsoln[sol_,mag_]:=Module[{i,n,el,ellist,framelist,seglist,linelist},
  ellist={};          (* Distorted *)  
  framelist={};       (* Undistorted *)
  For[i=1,i<=Length[Elements],i++,
    seglist={};       (* Distorted *)
    linelist={};      (* Undistorted *)
    el=Elements[[i]];
    For[n=1,n<=4,n++,
      seglist=Append[seglist,
            {Nodes[[el[[n]]]][[1]]+mag*sol[[2*el[[n]]-1]],
             Nodes[[el[[n]]]][[2]]+mag*sol[[2*el[[n]]]]}   ];
      linelist=Append[linelist,
            {Nodes[[el[[n]]]][[1]], Nodes[[el[[n]]]][[2]]} ]; 
      ];
    seglist=Append[seglist,seglist[[1]]];  (* Close the polygon *)
    linelist=Append[linelist,linelist[[1]]];          

    ellist=Append[ellist,seglist];      
    framelist=Append[framelist,linelist];
  ];
  Graphics[  {{GrayLevel[0.5], Map[ Line, framelist ] },
              {Map[ Line, ellist ]} },   
                   Frame->True, AspectRatio->Automatic ]
]

(* There is a problem with the scaling -- you want to draw the 
   system with the x and y axes to the same scale.  The options
   above do not do this, instead they force the plot to be
   square on the page, and will scale the axes differently  in
   order to achieve this. *)


(* Symmetry checker for a matrix.  Returns 0 if matrix is
   symmetric. *)

Symchk[mtx_]:=Sum[Sum[ (mtx[[i]][[j]]-mtx[[j]][[i]])^2, {i, 1, j}],
                            {j,1,Length[mtx]}];


(* For fixed boundary conditions, it's helpful to automatically
   partition the matrix -- in OOF this will be done by the 
   solver and/or UI.  In this case, the partitioning software
   assumes that, on a fixed boundary, both components of 
   displacement are fixed. *)

(* Inputs are the global stiffness matrix and right-hand side, 
   and a vector of the fixed degrees of freedom.
   Routine generates the AMatrix and BMatrix as side effects, 
   and returns a global solution vector suitable for use 
   in Drawsoln. *)

Ptnsolver[gmtx_,grhs_,fxdgs_]:=Module[{i,gnode,
                                      effrhs,fullsoln},
  (* Figure out which DOF's are fixed, not counting duplicates. *)
  (* Note that the Union operation also sorts the entries. *)
  fixedlist={};
  For[i=1,i<=Length[Elements],i++,
    If[ Length[Bdy[[i]]]==2,
      gnode=Elements[[i]][[Bdy[[i]][[1]]]];
      fixedlist=Union[fixedlist,{2*gnode-1}];
      fixedlist=Union[fixedlist,{2*gnode}];
      gnode=Elements[[i]][[Bdy[[i]][[2]]]];
      fixedlist=Union[fixedlist,{2*gnode-1}];
      fixedlist=Union[fixedlist,{2*gnode}];
    ];
  ];
  freelist=Table[ i, {i, 1, 2*Length[Nodes]}];
  freelist=Complement[freelist,fixedlist];

  AMatrix:=gmtx[[ freelist, freelist ]];
  BMatrix:=gmtx[[ fixedlist, fixedlist ]];
  CMatrix:=gmtx[[ freelist, fixedlist ]];
  CPMatrix:=gmtx[[ fixedlist, freelist ]];

  effrhs=grhs[[ freelist ]] - CMatrix.fxdgs;
  
  soln=LinearSolve[AMatrix, effrhs];

  (* Now rebuild the full solution vector *)
  For[i=1,i<=Length[soln],i++,
    fullsoln[freelist[[i]]]=soln[[i]]
  ];
  For[i=1,i<=Length[fxdgs],i++,
    fullsoln[fixedlist[[i]]]=fxdgs[[i]]
  ];

  Table[ fullsoln[i], {i,1,2*Length[Nodes]}]
]


Writeout[file_]:=Module[{strm},
  strm=OpenWrite[file,FormatType->OutputForm];
  For[i=1,i<=2*Length[Nodes],i++,
    For[j=1,j<=2*Length[Nodes],j++,
      Write[strm,i-1,"   ",j-1,"   ",N[GStiffness[[i,j]]]];
    ];
  ];
  Close[strm];
];


Writesoln[file_,svec_]:=Module[{strm},
  strm=OpenWrite[file,FormatType->OutputForm];
  For[i=1,i<=Length[svec],i+=2,
    Write[strm,((i-1)/2)," : ",N[svec[[i]]]," , ",N[svec[[i+1]]]];
  ];
  Close[strm];
];



